// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package handlers is a generated GoMock package.
package handlers

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderHandlers is a mock of OrderHandlers interface.
type MockOrderHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockOrderHandlersMockRecorder
}

// MockOrderHandlersMockRecorder is the mock recorder for MockOrderHandlers.
type MockOrderHandlersMockRecorder struct {
	mock *MockOrderHandlers
}

// NewMockOrderHandlers creates a new mock instance.
func NewMockOrderHandlers(ctrl *gomock.Controller) *MockOrderHandlers {
	mock := &MockOrderHandlers{ctrl: ctrl}
	mock.recorder = &MockOrderHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderHandlers) EXPECT() *MockOrderHandlersMockRecorder {
	return m.recorder
}

// CreateHandler mocks base method.
func (m *MockOrderHandlers) CreateHandler(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateHandler", c)
}

// CreateHandler indicates an expected call of CreateHandler.
func (mr *MockOrderHandlersMockRecorder) CreateHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHandler", reflect.TypeOf((*MockOrderHandlers)(nil).CreateHandler), c)
}

// DeleteHandler mocks base method.
func (m *MockOrderHandlers) DeleteHandler(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteHandler", c)
}

// DeleteHandler indicates an expected call of DeleteHandler.
func (mr *MockOrderHandlersMockRecorder) DeleteHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHandler", reflect.TypeOf((*MockOrderHandlers)(nil).DeleteHandler), c)
}

// GetAllHandler mocks base method.
func (m *MockOrderHandlers) GetAllHandler(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllHandler", c)
}

// GetAllHandler indicates an expected call of GetAllHandler.
func (mr *MockOrderHandlersMockRecorder) GetAllHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHandler", reflect.TypeOf((*MockOrderHandlers)(nil).GetAllHandler), c)
}

// GetByIdHandler mocks base method.
func (m *MockOrderHandlers) GetByIdHandler(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetByIdHandler", c)
}

// GetByIdHandler indicates an expected call of GetByIdHandler.
func (mr *MockOrderHandlersMockRecorder) GetByIdHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIdHandler", reflect.TypeOf((*MockOrderHandlers)(nil).GetByIdHandler), c)
}

// GetHTMLOrderHandler mocks base method.
func (m *MockOrderHandlers) GetHTMLOrderHandler(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetHTMLOrderHandler", c)
}

// GetHTMLOrderHandler indicates an expected call of GetHTMLOrderHandler.
func (mr *MockOrderHandlersMockRecorder) GetHTMLOrderHandler(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTMLOrderHandler", reflect.TypeOf((*MockOrderHandlers)(nil).GetHTMLOrderHandler), c)
}
