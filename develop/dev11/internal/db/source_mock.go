// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package db is a generated GoMock package.
package db

import (
	entity "L2/develop/dev11/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventSource is a mock of EventSource interface.
type MockEventSource struct {
	ctrl     *gomock.Controller
	recorder *MockEventSourceMockRecorder
}

// MockEventSourceMockRecorder is the mock recorder for MockEventSource.
type MockEventSourceMockRecorder struct {
	mock *MockEventSource
}

// NewMockEventSource creates a new mock instance.
func NewMockEventSource(ctrl *gomock.Controller) *MockEventSource {
	mock := &MockEventSource{ctrl: ctrl}
	mock.recorder = &MockEventSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventSource) EXPECT() *MockEventSourceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventSource) CreateEvent(ctx context.Context) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventSourceMockRecorder) CreateEvent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventSource)(nil).CreateEvent), ctx)
}

// DeleteEvent mocks base method.
func (m *MockEventSource) DeleteEvent(ctx context.Context, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventSourceMockRecorder) DeleteEvent(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventSource)(nil).DeleteEvent), ctx, uid)
}

// GetEventForDay mocks base method.
func (m *MockEventSource) GetEventForDay(ctx context.Context, date string) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventForDay", ctx, date)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventForDay indicates an expected call of GetEventForDay.
func (mr *MockEventSourceMockRecorder) GetEventForDay(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventForDay", reflect.TypeOf((*MockEventSource)(nil).GetEventForDay), ctx, date)
}

// GetEventForMonth mocks base method.
func (m *MockEventSource) GetEventForMonth(ctx context.Context, date string) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventForMonth", ctx, date)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventForMonth indicates an expected call of GetEventForMonth.
func (mr *MockEventSourceMockRecorder) GetEventForMonth(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventForMonth", reflect.TypeOf((*MockEventSource)(nil).GetEventForMonth), ctx, date)
}

// GetEventForWeek mocks base method.
func (m *MockEventSource) GetEventForWeek(ctx context.Context, date string) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventForWeek", ctx, date)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventForWeek indicates an expected call of GetEventForWeek.
func (mr *MockEventSourceMockRecorder) GetEventForWeek(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventForWeek", reflect.TypeOf((*MockEventSource)(nil).GetEventForWeek), ctx, date)
}

// UpdateEvent mocks base method.
func (m *MockEventSource) UpdateEvent(ctx context.Context, event *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventSourceMockRecorder) UpdateEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventSource)(nil).UpdateEvent), ctx, event)
}
